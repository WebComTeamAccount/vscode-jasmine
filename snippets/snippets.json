{
	"afterEach": {
		"prefix": "ae",
		"body": "afterEach(${2:async} function (this: ${1:CurrentThisContext}) {\n\t$3\n});",
		"description": "afterEach function is called once after each spec"
	},
	"beforeEach": {
		"prefix": "be",
		"body": "beforeEach(${2:async} function (this: ${1:CurrentThisContext}) {\n\t$3\n});",
		"description": "beforeEach function is called once before each spec"
	},
	"callsAll": {
		"prefix": "ca",
		"body": "${2:spy}.calls.all()",
		"description": "returns the context (the this) and arguments passed all calls"
	},
	"callsAllArgs": {
		"prefix": "caa",
		"body": "${2:spy}.calls.allArgs()",
		"description": "returns the arguments to all calls"
	},
	"callsAny": {
		"prefix": "ca",
		"body": "${2:spy}.calls.any()",
		"description": "returns false if the spy has not been called at all, and then true once at least one call happens"
	},
	"callsArgsFor": {
		"prefix": "caf",
		"body": "${2:spy}.calls.argsFor(${3:call number})",
		"description": "returns the arguments passed to call number index"
	},
	"callsCount": {
		"prefix": "cc",
		"body": "${2:spy}.calls.count()",
		"description": "returns the number of times the spy was called"
	},
	"callsFirst": {
		"prefix": "cf",
		"body": "${2:spy}.calls.first()",
		"description": "returns the context (the this) and arguments for the first call"
	},
	"callsMostRescent": {
		"prefix": "cmr",
		"body": "${2:spy}.calls.mostRecent()",
		"description": "returns the context (the this) and arguments for the most recent call"
	},
	"callsReset": {
		"prefix": "cr",
		"body": "${2:spy}.calls.reset()",
		"description": "clears all tracking for a spy"
	},
	"createSpy": {
		"prefix": "cs",
		"body": "jasmine.createSpy('${2:name}');$0",
		"description": "creates a “bare” spy"
	},
	"createSpyObject": {
		"prefix": "cso",
		"body": "jasmine.createSpyObj('${2:spy name}', ['${3:method name}'$4]);$0",
		"description": "creates a mock with multiple spies"
	},
	"describe": {
		"prefix": "desc",
		"body": "describe('${1:Name of the group}', () => {\n\t$2\n});",
		"description": "creates a suite of tests"
	},
	"expext": {
		"prefix": "exp",
		"body": "expect($2)$0",
		"description": "takes a value, called the actual."
	},
	"focusDescribe": {
		"prefix": "fdesc",
		"body": "fdescribe('${1:Name of the group}', () => {\n    $2\n});\n    ",
		"description": "focused describe"
	},
	"focusedIt": {
		"prefix": "fit",
		"body": "fit('${3:should behave...}', ${2:async} function (this: ${1:CurrentThisContext}) {\n    $4\n});\n    ",
		"description": "focused it"
	},
	"it": {
		"prefix": "it",
		"body": "it('${3:should behave...}', ${2:async} function (this: ${1:CurrentThisContext}) {\n\t$4\n});",
		"description": "creates a test method"
	},
	"any": {
		"prefix": "any",
		"body": "jasmine.any($2)$0",
		"description": "akes a constructor or “class” name as an expected value. It returns true if the constructor matches the constructor of the actual value"
	},
	"objectContaining": {
		"prefix": "oc",
		"body": "jasmine.objectContaining('${2:key}': ${3:value}\\}})$0",
		"description": "when an expectation only cares about certain key/value pairs in the actual"
	},
	"notToBe": {
		"prefix": "nb",
		"body": "expect($2).not.toBe($3);$0",
		"description": "expects an object - value not to be equal"
	},
	"notToBleCloseTo": {
		"prefix": "nct",
		"body": "expect($2).not.toBeCloseTo(${3:number}, ${4:delta});$0",
		"description": "expects a value not to be close to another value"
	},
	"notToBeDefined": {
		"prefix": "nd",
		"body": "expect($2).not.toBeDefined();$0",
		"description": "expects the argument is not defined"
	},
	"notToBeFalsef": {
		"prefix": "nf",
		"body": "expect($2).not.toBeFalsy();$0",
		"description": "expects the argument not to be false"
	},
	"notToBeGreaterThan": {
		"prefix": "ngt",
		"body": "expect($2).not.toBeGreaterThan($3);$0",
		"description": "expects the argument not to be greater than"
	},
	"notToBeLessThanlt": {
		"prefix": "nlt",
		"body": "expect($2).not.toBeLessThan($3);$0",
		"description": "expects the argument not to be less than"
	},
	"notToBeNull": {
		"prefix": "nn",
		"body": "expect($2).not.toBeNull();$0",
		"description": "expects the argument not to be null"
	},
	"notToBeTruthy": {
		"prefix": "nt",
		"body": "expect($2).not.toBeTruthy();$0",
		"description": "expects the argument not to be truthy"
	},
	"notToBeUndefined": {
		"prefix": "nu",
		"body": "expect($2).not.toBeUndefined();$0",
		"description": "expects the argument not to be undefined"
	},
	"notToContain": {
		"prefix": "nc",
		"body": "expect(${2:array}).not.toContain(${3:item});$0",
		"description": "expects the array does not contain the argument"
	},
	"notToEqual": {
		"prefix": "ne",
		"body": "expect($2).not.toEqual($3);$0",
		"description": "expects the first argument not to be equal to the second one"
	},
	"notToMatch": {
		"prefix": "nm",
		"body": "expect($2).not.toMatch($3);$0",
		"description": "expects the first argument not to match the second one"
	},
	"notToThrow": {
		"prefix": "nt",
		"body": "expect($2).not.toThrow();$0",
		"description": "expects the argument not to throw"
	},
	"spyOnAndCallFake": {
		"prefix": "scf",
		"body": "spyOn(${1:object}, '${2:method}').and.callFake(${3:() => \\{\n    $5\n\\}});$0\n    ",
		"description": "all calls to the spy will delegate to the supplied function"
	},
	"spyOnAndCallThrough": {
		"prefix": "sct",
		"body": "spyOn(${2:object}, '${3:method}').and.callThrough();$0",
		"description": "tracks all calls to it and delegates to the actual implementation"
	},
	"spyOnAndReturnValue": {
		"prefix": "srv",
		"body": "spyOn(${2:object}, '${3:method}').and.returnValue('${4:value}');$0",
		"description": "all calls to the function will return a specific value"
	},
	"spyOnAndStub": {
		"prefix": "ss",
		"body": "spyOn(${2:object}, '${3:method}').and.stub();$0",
		"description": "The original stubbing behavior is returned at any time"
	},
	"spyOnAndThrowError": {
		"prefix": "ste",
		"body": "spyOn(${2:object}, '${3:method}').and.throwError('${4:error}');$0",
		"description": "all calls to the spy will throw the specified value as an error"
	},
	"spyOnProperty get": {
		"prefix": "spg",
		"body": "spyOnProperty(${2:object}, '${3:method}', 'get')$4;$0",
		"description": "Install a spy on a property onto an existing object with get accessType"
	},
	"spyOnProperty set": {
		"prefix": "sps",
		"body": "spyOnProperty(${2:object}, '${3:method}', 'set')$4;$0",
		"description": "Install a spy on a property onto an existing object with set accessType"
	},
	"spyOn": {
		"prefix": "so",
		"body": "spyOn(${2:object}, '${3:method}')$4;$0",
		"description": "creates a spy for the specified method"
	},
	"toBe": {
		"prefix": "tb",
		"body": "expect($2).toBe($3);$0",
		"description": "expects the first argument to be equal with the second one"
	},
	"toBeCloseTo": {
		"prefix": "tbct",
		"body": "expect($2).toBeCloseTo(${3:number}, ${4:delta});$0",
		"description": "expects the first argument to be close to the second one base on the delta"
	},
	"toBeDefined": {
		"prefix": "tbd",
		"body": "expect($2).toBeDefined();$0",
		"description": "expects the argument is defined"
	},
	"toBeFalsy": {
		"prefix": "tbf",
		"body": "expect($2).toBeFalsy();$0",
		"description": "expects the argument is falsy"
	},
	"toBeGreaterThan": {
		"prefix": "tbgt",
		"body": "expect($2).toBeGreaterThan($3);$0",
		"description": "expects the argument is greater than"
	},
	"toBeLessThan": {
		"prefix": "tblt",
		"body": "expect($2).toBeLessThan($3);$0",
		"description": "expects the argument is less than"
	},
	"toBeNull": {
		"prefix": "tbn",
		"body": "expect($2).toBeNull();$0",
		"description": "expects the argument is null"
	},
	"toBeTruthy": {
		"prefix": "tbt",
		"body": "expect($2).toBeTruthy();$0",
		"description": "expects the argument is truthy"
	},
	"toBeUndefined": {
		"prefix": "tbu",
		"body": "expect($2).toBeUndefined();$0",
		"description": "expects the argument is undefined"
	},
	"toContain": {
		"prefix": "tc",
		"body": "expect(${2:array}).toContain(${3:item});$0",
		"description": "expects the array contains the argument"
	},
	"toEqual": {
		"prefix": "te",
		"body": "expect($2).toEqual($3);$0",
		"description": "expects the first argument to be equal with the second one"
	},
	"toHaveBeenCalled": {
		"prefix": "thbc",
		"body": "expect($2).toHaveBeenCalled();$0",
		"description": "returns true if the spy was called"
	},
	"toHaveBeenCalledWith": {
		"prefix": "thbcw",
		"body": "expect($2).toHaveBeenCalledWith(${3:params});$0",
		"description": "he toHaveBeenCalled matcher will return true if the argument list matches any of the recorded calls to the spy"
	},
	"toMatch": {
		"prefix": "tm",
		"body": "expect($2).toMatch($3);$0",
		"description": "returns true if the argument matches the second value"
	},
	"toThrow": {
		"prefix": "tt",
		"body": "expect($2).toThrow();$0",
		"description": "expects that the specified method will throw"
	},
	"toThrowError": {
		"prefix": "tte",
		"body": "expect($2).toThrowError(${3:error});$0",
		"description": "expects that the specified method will throw with the specified error"
	},
	"xDescribe": {
		"prefix": "xdesc",
		"body": "xdescribe('${1:Name of the group}', () => {\n\t$2\n});",
		"description": "these suites and any specs inside them are skipped when run and thus their results will not appear in the results"
	},
	"xIt": {
		"prefix": "xit",
		"body": "xit('${3:should behave...}', ${2:async} function (this: ${1:CurrentThisContext}) {\n\t$4\n});",
		"description": "pending specs do not run, but their names will show up in the results as pending"
	}
}